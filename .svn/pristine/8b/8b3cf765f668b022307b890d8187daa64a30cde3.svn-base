<template>
  <div>
  <el-row>
    <el-col :span="23">
      <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm"  size="mini" >
  
        <el-row>
          <el-col :span="10">
            <el-form-item label="机构名称" prop="officeName">
              <el-input placeholder="请输入内容" v-model="ruleForm.officeName" class="input-with-select" :disabled="true">
                <el-button @click="openOfficeDialog()" slot="append" icon="el-icon-search">选择</el-button>
              </el-input>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row>
          <el-col :span="10">
            <el-form-item label="角色名称" prop="name">
              <el-input v-model="ruleForm.name" ></el-input>
            </el-form-item>
          </el-col>
        </el-row>

      <el-row>
        <el-col :span="10">
          <el-form-item prop="roleTypeName" label="角色类型" >
           <el-select v-model="ruleForm.roleType" placeholder="请选择">
              <el-option
                v-for="item in roleTypeData"
                :key="item.value"
                :label="item.label"
                :value="item.value">
              </el-option>
            </el-select>
          </el-form-item></el-col>
        </el-row>

        <el-row>
        <el-col :span="10">
          <el-form-item prop="dataScopeName" label="数据范围" >
           <el-select v-model="ruleForm.dataScope" placeholder="请选择">
              <el-option
                v-for="item in dataScopeData"
                :key="item.value"
                :label="item.label"
                :value="item.value">
              </el-option>
            </el-select>
          </el-form-item></el-col>
        </el-row>

       <el-row>
          <el-col :span="10">
             <el-form-item label="是否系统角色">
                <el-switch v-model="ruleForm.isSys" :active-value="1" :inactive-value="0"></el-switch>
             </el-form-item>
          </el-col>
        </el-row> 
        <el-row>
          <el-col :span="10">
        <el-form-item label="备注" prop="remarks">
          <el-input type="textarea" v-model="ruleForm.remarks"></el-input>
        </el-form-item>
          </el-col>
        </el-row>
        <el-form-item v-if="flag!=0">
          <el-button type="primary" @click="submitForm('ruleForm')">保存</el-button>
          <el-button @click="resetForm('ruleForm')">重置</el-button>
        </el-form-item>
      </el-form>
    </el-col>
  </el-row>

    <el-dialog title="组织机构" :visible.sync="dialogTableVisible">
      <el-input
        placeholder="输入关键字进行过滤"
        v-model="filterText">
      </el-input>
      <el-tree
        class="filter-tree"
        :data="officeTree"
        expand-on-click-node=“false”
        :props="defaultProps"
        default-expand-all
        highlight-current
        :filter-node-method="filterNode"
        @node-click="handleNodeClick"
        ref="tree">
      </el-tree>

      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogTableVisible = false" v-loading.fullscreen.lock="fullscreenLoading">取 消</el-button>
        <el-button type="primary" @click="selectOffice">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import { saveRole, updateRole, selectRole } from '@/api/system/role/index'
  import { getOfficeTreeData } from '@/api/system/office/index'
  import { getDictList } from '@/api/system/dict/index'
  export default {
    watch: {
      filterText(val) {
        this.$refs.tree.filter(val)
      }
    },
    data() {
      return {
        sexList: [{ value: '男', label: '男' }, { value: '女', label: '女' }],
        flagUpdate: false,
        id: '',
        flag: 0,
        dialogTableVisible: false,
        fullscreenLoading: false,
        filterText: '',
        treeSelectData: {
          treeKey: '',
          treeValue: ''
        },
        officeTree: [],
        dataScopeData: [],
        roleTypeData: [],
        defaultProps: {
          children: 'children',
          label: 'label'
        },
        ruleForm: {
          id: '',
          name: '',
          officeName: '',
          officeId: '',
          remarks: '',
          isSys: 0,
          roleTypeName: '',
          dataScopeName: '',
          roleType: '',
          dataScope: ''
        },
        rules: {
          name: [
            { required: true, message: '请输入角色名称', trigger: 'blur' },
            { min: 0, max: 20, message: '最大 64个字符', trigger: 'blur' }
          ],
          officeId: { required: true, message: '机构名称不允许为空', trigger: 'blur' }
        }
      }
    },
    mounted: function() {
      this.$nextTick(function() {
        // flag==0 表示查看 flag=1表示需改
        this.id = this.$route.query.id
        if (this.id) {
          this.load()
        }
        this.flag = Number.parseInt(this.$route.query.flag)
        // 获取机构树形的数据
        this.getTreeData()
        this.getDicData()
      })
    },
    methods: {
      submitForm(formName) {
        // 提交form
        this.$refs[formName].validate((valid) => {
          if (valid) {
            // 新增 flag===1
            if (this.flag === 1) {
              saveRole(this.ruleForm).then(response => {
                console.log('ok')
                this.$router.push({ path: '/system/Role' })
              })
            // 修改 flag===2
            } else if (this.flag === 2) {
              updateRole(this.ruleForm).then(response => {
                console.log('ok')
                this.$router.push({ path: '/system/Role' })
              })
            } else {
              console.log('error submit!!:' + this.flag)
            }
          } else {
            console.log('error submit!!')
            return false
          }
        })
      },
      resetForm(formName) {
        // 重置表单
        this.$refs[formName].resetFields()
      },
      openOfficeDialog() {
        // 打开机构树形dialog
        this.dialogTableVisible = true
      },
      filterNode(value, data) {
        // 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
        if (!value) return true
        return data.label.indexOf(value) !== -1
      },
      openFullScreen() {
        this.fullscreenLoading = true
        setTimeout(() => {
          this.fullscreenLoading = false
        }, 2000)
      },
      load() {
        selectRole({ 'id': this.id }).then(response => {
          this.ruleForm = response.new
          console.log(this.ruleForm)
        })
      },
      getTreeData() {
        getOfficeTreeData().then(response => {
          this.officeTree = response.newList
          console.log(this.officeTree)
        })
      },
      selectOffice() {
        // 点击确定以后先关闭当前界面
        this.dialogTableVisible = false
        if (this.treeSelectData.treeKey) {
          this.ruleForm.officeId = this.treeSelectData.treeKey
          this.ruleForm.officeName = this.treeSelectData.treeValue
        }
      },
      handleNodeClick(data) {
        this.treeSelectData.treeKey = data.id
        this.treeSelectData.treeValue = data.label
      },
      getDicData() {
        // 获取字典数据
        const dataSocopeQuery = { 'type': 'dataSocope' }
        getDictList(dataSocopeQuery).then(response => {
          console.log(response.newList)
          this.dataScopeData = response.newList
        })
        const roleTypeQuery = { 'type': 'roleType' }
        getDictList(roleTypeQuery).then(response => {
          console.log(response.newList)
          this.roleTypeData = response.newList
        })
      }
    }
  }
</script>

<style scoped>
  .line{
    text-align: center;
  }
</style>

